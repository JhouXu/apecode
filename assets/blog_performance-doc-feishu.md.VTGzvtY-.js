import{m as l,l as n,c as e,b as t,g as s,k as p,ak as h,j as k}from"./chunks/framework.Cjgbzf8K.js";const F=JSON.parse('{"title":"前端性能优化之飞书文档","description":"","frontmatter":{"layout":"doc","date":"2025-05-20"},"headers":[],"relativePath":"blog/performance-doc-feishu.md","filePath":"blog/performance-doc-feishu.md","lastUpdated":1747899715000}'),r={name:"blog/performance-doc-feishu.md"};function d(o,i,c,E,g,u){const a=n("PageInfo");return t(),e("div",null,[i[0]||(i[0]=s("h1",{id:"前端性能优化之飞书文档",tabindex:"-1"},[k("前端性能优化之飞书文档 "),s("a",{class:"header-anchor",href:"#前端性能优化之飞书文档","aria-label":'Permalink to "前端性能优化之飞书文档"'},"​")],-1)),p(a,{readingTime:"4",wordCount:"1.4k",publicTime:"2025-05-20"}),i[1]||(i[1]=h(`<p><a href="https://www.bilibili.com/video/BV1JuojYcEmH/" target="_blank" rel="noreferrer">前端进阶 Eric - 前端性能优化方案顶级理解 👉</a></p><h2 id="首屏加载优化" tabindex="-1">首屏加载优化 <a class="header-anchor" href="#首屏加载优化" aria-label="Permalink to &quot;首屏加载优化&quot;">​</a></h2><h3 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h3><p>导致首屏加载慢的原因？</p><ul><li>网络延迟</li><li>资源太大</li></ul><p>网络延迟：</p><ul><li>CDN</li><li>Pre load</li><li>Pre Render</li></ul><p>资源太大：</p><ul><li>包分 chunk</li><li>懒加载</li><li>公共资源 vender</li><li>缓存 <ul><li>强缓存（Expire、Cache-Control）</li><li>协商缓存（Last-Modified、If-Modified-Since，Etag、If-None-Match）</li><li>策略缓存 service-worker</li></ul></li><li>服务端渲染 SSR</li><li>局部 SSR（落地页、广告页、营销活动页）</li><li>PWA（冷门）</li></ul><h3 id="衡量指标" tabindex="-1">衡量指标 <a class="header-anchor" href="#衡量指标" aria-label="Permalink to &quot;衡量指标&quot;">​</a></h3><ul><li>FP（First Paint）：首次绘制。</li><li>FCP（First Contentful Paint）：首次内容绘制。</li><li>FMP（First Meaningful Paint）：首次有意义绘制。</li><li>LCP（Largest Contentful Paint）：最大内容绘制。</li></ul><p>其中 FP、FCP 可以通过浏览器提供的 API 计算 <code>Performance</code>，FMP 则需要使用 MutationObserver 来实现。</p><div class="tip custom-block"><p class="custom-block-title">Web Tracker</p><p>对于性能监控或者上报的代码，通常只会编写一次</p><ul><li>性能采集 <ul><li>Performance API</li><li>MutationObserver</li></ul></li><li>用户行为采集 <ul><li>无痕埋点</li><li>手动埋点</li><li>可视化埋点</li></ul></li><li>异常采集 <ul><li>react ErrorBoundary</li><li>异常捕获 try catch</li></ul></li></ul></div><div class="tip custom-block"><p class="custom-block-title">SSR 相关性能指标</p><ul><li><code>TBT</code> (Total Blocking Time)：总阻塞时间。</li><li><code>TTI</code> (Time to Interactive)：可交互时间，从 <code>FCP</code> -&gt; <code>可交互</code> 的时间。</li></ul></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>指标衡量，webvital、写性能采集截屏或录像（rrweb）</p></div><h3 id="具体优化" tabindex="-1">具体优化 <a class="header-anchor" href="#具体优化" aria-label="Permalink to &quot;具体优化&quot;">​</a></h3><ul><li>优化图片：推荐 WebP 格式，减少图片体积。</li><li>组件按需加载：React Suspense、React Lazy。</li><li>延迟加载：滚动加载，可视区域内容渲染。</li><li>tree-shaking：摇树，只保留用到的代码。 <ul><li>tree-shaking 实现条件 - esm （模块化：amd、cmd、umd、commonjs、esm）</li><li>打包工具：rollup、parcel、rspack、esbuild、swc</li></ul></li><li>CDN：oss + cdn。</li><li>精简三方库 <ul><li>按需导入 babel-plugin-import</li><li>国际化文件需要提前移除</li></ul></li><li>缓存：强缓存、协商缓存、策略缓存。</li><li>字体压缩：font-spider 移除未用字体，web-font 处理字体加载。</li><li>SSR（Server Side Render）、SSG（Server Side Generate）</li></ul><div class="tip custom-block"><p class="custom-block-title">服务端渲染技术</p><p><code>SSR</code> (Server Side Render)：服务端渲染，服务端生成静态页面，客户端渲染。</p><p><code>SSG</code> (Static Site Generation)：静态站点生成，将动态内容提前生成静态页面，静态页面渲染。</p><p><code>SSE</code> (Server Sent Events)：服务端事件推送，服务端推送事件给客户端。</p><p><code>ISR</code> (Incremental Static Regeneration)：增量静态生成，在构建时生成静态页面，在发布时更新静态页面。</p><p><code>SSR with Streaming</code>: 流式渲染。</p><p><code>React Server Components</code>：React 18 新特性，服务端组件。</p><p><code>PPR</code> (Partail Prerendering): 部分预渲染，整合了 ISR、RSC 和流式渲染的特性，做到了动静结合。</p></div><h3 id="具体优化-进阶" tabindex="-1">具体优化（进阶） <a class="header-anchor" href="#具体优化-进阶" aria-label="Permalink to &quot;具体优化（进阶）&quot;">​</a></h3><ul><li>预加载：preload。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Link Rel Preload</p><ul><li>href 属性中的资源路径。</li><li>as 属性中的资源类型。</li></ul><p>可以预加载多种类型的内容。as 属性可能的值包括：</p><ul><li>audio：音频文件，通常在 &lt;audio&gt; 中使用。</li><li>document：用于嵌入在 &lt;frame&gt; 或 &lt;iframe&gt; 中的 HTML 文档。</li><li>embed：用于嵌入在 &lt;embed&gt; 元素中的资源。</li><li>fetch：通过 fetch 或 XHR 请求访问的资源，例如 ArrayBuffer、WebAssembly 二进制文件或 JSON 文件。</li><li>font：字体文件。</li><li>image：图像文件。</li><li>object：要嵌入在 &lt;object&gt; 元素中的资源。</li><li>script：JavaScript 文件。</li><li>style：CSS 样式表。</li><li>track：WebVTT 文件。</li><li>worker：JavaScript web worker 或 shared worker。</li><li>video：视频文件，通常在 &lt;video&gt; 中使用。</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Reference/Attributes/rel/preload" target="_blank" rel="noreferrer">Rel Preload - MDN 👉</a></p></div><ul><li>加载关键 CSS，将提取到的 css 内联插入到节点。</li><li>HTTP/2 Server Push。</li><li>延迟加载。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- dom 要不要等 js --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>预渲染，PreRender，webpack 方案：@prerender/webpack-plugin + @prerender/renderer-puppeteer。</li><li>SSR，react - nextJS，vue - nuxtJS。</li><li>bundle 分块，webpack 配置：optimization.splitChunks。</li></ul><h2 id="低代码动态物料体系" tabindex="-1">低代码动态物料体系 <a class="header-anchor" href="#低代码动态物料体系" aria-label="Permalink to &quot;低代码动态物料体系&quot;">​</a></h2><p>插件化（微内核），远程物料。</p><p>插件底座的设计是非常重要的。</p><ul><li>babel、webpack、vite、pinia 是<code>插件化机制</code>的践行者。</li><li>koa、redux、axios 是面向切面编程 <code>AOP(中间件机制)</code> 的践行者。</li></ul><details class="details custom-block"><summary>插件底座实现（伪代码）</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义插件底座</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plugins);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      plugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> doc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义插件协议</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TextPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;text&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ImagePlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;image&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TextPlugin);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ImagePlugin);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></details><h3 id="远程插件" tabindex="-1">远程插件 <a class="header-anchor" href="#远程插件" aria-label="Permalink to &quot;远程插件&quot;">​</a></h3><ul><li>requireJS</li><li>systemJS</li><li>react-loadable</li><li><strong>module-federation runtime</strong></li></ul><div class="tip custom-block"><p class="custom-block-title">微前端技术</p><ul><li>single-spa</li><li>qiankun</li><li>macro-app</li><li>wujie</li></ul></div><h3 id="课件" tabindex="-1">课件 <a class="header-anchor" href="#课件" aria-label="Permalink to &quot;课件&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">信息</p><p>由于项目整体架构复杂，并且设计之初时考虑能有更多物料轻松接入的可能，因此，我们整体考虑了动态物料体系的方案，这个方案无论你当下开发文档项目、低代码平台、无代码平台等，都是不错的方案选择，希望可以帮你拓宽业务与架构视野。</p><p><strong>动态物料体系设计</strong></p><p>动态体系，需要有规范约定，这个约定我们可以叫 <strong>DSL</strong>(Domain Specific Language)，也可以称为 JSON Schema。</p><p><strong>物料加载机制实现</strong></p><p>借助统一的物料体系设计，我们下层实现物料加载底座，通过物料动态注册等机制实现动态物料逻辑。</p><p><strong>远程物料开发与构建</strong></p><ul><li>通过字节内部 rspack 进行构建，远程资源加载方案我们呢有一个演变过程。</li><li>基于 monorepo 架构，远程物料单独开发构建，主体应用在运行时加载远程物料并处理。</li></ul><p><strong>远程物料加载与运行时处理</strong></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>requireJS -&gt; systemJS -&gt; react-loadable -&gt; <strong>module-federation runtime</strong></p></div></div><h2 id="白板实现方案优化" tabindex="-1">白板实现方案优化 <a class="header-anchor" href="#白板实现方案优化" aria-label="Permalink to &quot;白板实现方案优化&quot;">​</a></h2><h3 id="课件-1" tabindex="-1">课件 <a class="header-anchor" href="#课件-1" aria-label="Permalink to &quot;课件&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">信息</p><p>白板方案，大部分同学第一反应，那肯定是 canvas ，没错，但是，可以很直接地告诉大家，canvas 方案在大家平常小数据量的可视化场景，没太大问题，但是如果是大量数据渲染，canvas 瓶颈也明显，为了进一步优化白板性能，我们进行了以下尝试。</p><p><strong>Webassembly</strong></p><p><strong>Skia</strong></p><p>这个库是 C++ 编写的图形处理库，目前有 Google 公司维护。</p><p>同时，浏览器 canvas 的底层就是 skia：<a href="https://chromium.googlesource.com/chromium/blink/+/refs/heads/main/Source/core/html/HTMLCanvasElement.cpp" target="_blank" rel="noreferrer">HTMLCanvasElement.cpp 👉</a></p><p><strong>可视区绘制</strong></p></div>`,38))])}const m=l(r,[["render",d]]);export{F as __pageData,m as default};
