import{m as i,l,c as o,b as n,g as t,k as r,ak as d,j as s}from"./chunks/framework.B-iYIpxV.js";const p=JSON.parse('{"title":"从前端视角看 IIS、Nginx、Tomcat 与 Redis：部署与架构中的角色解读","description":"","frontmatter":{"layout":"doc","date":"2025-08-08T00:00:00.000Z","author":"俊小赞","tags":["服务器","前后端部署","Nginx","Redis","Tomcat","IIS"]},"headers":[],"relativePath":"blog/iis-nginx-tomcat-redis.md","filePath":"blog/iis-nginx-tomcat-redis.md","lastUpdated":1754666331000}'),c={name:"blog/iis-nginx-tomcat-redis.md"};function h(g,a,u,x,m,b){const e=l("PageInfo");return n(),o("div",null,[a[0]||(a[0]=t("h1",{id:"从前端视角看-iis、nginx、tomcat-与-redis-部署与架构中的角色解读",tabindex:"-1"},[s("从前端视角看 IIS、Nginx、Tomcat 与 Redis：部署与架构中的角色解读 "),t("a",{class:"header-anchor",href:"#从前端视角看-iis、nginx、tomcat-与-redis-部署与架构中的角色解读","aria-label":'Permalink to "从前端视角看 IIS、Nginx、Tomcat 与 Redis：部署与架构中的角色解读"'},"​")],-1)),r(e,{readingTime:"3",wordCount:"931",publicTime:"2025-08-08"}),a[1]||(a[1]=d('<p>在前端工程师成长到中高级阶段后，理解 <strong>服务端组件在系统部署中的角色</strong> 就显得尤为重要。本文从前端角度出发，深入解读 <strong>IIS、Nginx、Tomcat、Redis</strong> 四大常见组件的作用、区别与组合方式，帮助你从“写完代码”走向“理解部署”。</p><h2 id="一、iis-windows-系统下的-web-服务鼻祖" tabindex="-1">一、IIS：Windows 系统下的 Web 服务鼻祖 <a class="header-anchor" href="#一、iis-windows-系统下的-web-服务鼻祖" aria-label="Permalink to &quot;一、IIS：Windows 系统下的 Web 服务鼻祖&quot;">​</a></h2><h3 id="🔹-简介" tabindex="-1">🔹 简介 <a class="header-anchor" href="#🔹-简介" aria-label="Permalink to &quot;🔹 简介&quot;">​</a></h3><p>IIS（Internet Information Services）是微软推出的 Web 服务器，广泛用于 .NET 平台或 Windows Server 部署环境。</p><h3 id="🔸-前端开发中的场景" tabindex="-1">🔸 前端开发中的场景 <a class="header-anchor" href="#🔸-前端开发中的场景" aria-label="Permalink to &quot;🔸 前端开发中的场景&quot;">​</a></h3><ul><li>在政府、金融、传统企业中，<strong>很多内网系统依赖 IIS 托管 Web 站点</strong>。</li><li>用于部署 HTML、前端打包后的 <code>dist</code> 文件夹。</li><li>配合 <code>web.config</code> 做 URL 重写，支持 SPA 应用路由跳转。</li></ul><h3 id="⚠️-注意" tabindex="-1">⚠️ 注意 <a class="header-anchor" href="#⚠️-注意" aria-label="Permalink to &quot;⚠️ 注意&quot;">​</a></h3><ul><li>仅限 Windows 环境，不跨平台。</li><li>配置复杂性高于 Nginx。</li><li>性能在高并发场景下略逊于 Nginx。</li></ul><h2 id="二、nginx-现代部署架构的基石" tabindex="-1">二、Nginx：现代部署架构的基石 <a class="header-anchor" href="#二、nginx-现代部署架构的基石" aria-label="Permalink to &quot;二、Nginx：现代部署架构的基石&quot;">​</a></h2><h3 id="🔹-简介-1" tabindex="-1">🔹 简介 <a class="header-anchor" href="#🔹-简介-1" aria-label="Permalink to &quot;🔹 简介&quot;">​</a></h3><p>Nginx 是轻量高效的 Web Server，支持反向代理、负载均衡、静态资源服务、缓存等功能。</p><h3 id="🔸-前端开发中的典型用途" tabindex="-1">🔸 前端开发中的典型用途 <a class="header-anchor" href="#🔸-前端开发中的典型用途" aria-label="Permalink to &quot;🔸 前端开发中的典型用途&quot;">​</a></h3><ul><li><strong>部署前端应用</strong>：将 Vue/React 项目打包后，通过 Nginx 提供服务。</li><li><strong>反向代理接口请求</strong>：前端调用后端 API，避免跨域。</li><li><strong>前后端路径统一管理</strong>：配置 location 区块划分服务路径。</li></ul><h3 id="✅-优点" tabindex="-1">✅ 优点 <a class="header-anchor" href="#✅-优点" aria-label="Permalink to &quot;✅ 优点&quot;">​</a></h3><ul><li>超轻量，配置灵活，跨平台支持。</li><li>静态文件服务性能极佳。</li><li>与 Node.js、Tomcat、SpringBoot、Python 等后端语言无缝集成。</li></ul><h2 id="三、tomcat-java-项目的承载者" tabindex="-1">三、Tomcat：Java 项目的承载者 <a class="header-anchor" href="#三、tomcat-java-项目的承载者" aria-label="Permalink to &quot;三、Tomcat：Java 项目的承载者&quot;">​</a></h2><h3 id="🔹-简介-2" tabindex="-1">🔹 简介 <a class="header-anchor" href="#🔹-简介-2" aria-label="Permalink to &quot;🔹 简介&quot;">​</a></h3><p>Tomcat 是 Apache 基金会出品的 Java Web 容器，主要用于运行 Java Servlet 和 JSP 程序。</p><h3 id="🔸-你可能遇到的场景" tabindex="-1">🔸 你可能遇到的场景 <a class="header-anchor" href="#🔸-你可能遇到的场景" aria-label="Permalink to &quot;🔸 你可能遇到的场景&quot;">​</a></h3><ul><li>与 Spring Boot 项目一起部署，承载后端接口。</li><li>有些传统系统中，将前端页面（JSP）也交由 Tomcat 渲染。</li></ul><h3 id="🔄-与前端的关系" tabindex="-1">🔄 与前端的关系 <a class="header-anchor" href="#🔄-与前端的关系" aria-label="Permalink to &quot;🔄 与前端的关系&quot;">​</a></h3><ul><li>如项目部署在 Tomcat 上，前端请求 <code>/api/xxx</code> 实际由 Tomcat 接收处理。</li><li>可以通过 <code>Nginx -&gt; Tomcat</code> 的方式做反向代理，实现高并发支持和请求分发。</li></ul><h2 id="四、redis-提升性能的缓存神器" tabindex="-1">四、Redis：提升性能的缓存神器 <a class="header-anchor" href="#四、redis-提升性能的缓存神器" aria-label="Permalink to &quot;四、Redis：提升性能的缓存神器&quot;">​</a></h2><h3 id="🔹-简介-3" tabindex="-1">🔹 简介 <a class="header-anchor" href="#🔹-简介-3" aria-label="Permalink to &quot;🔹 简介&quot;">​</a></h3><p>Redis 是基于内存的数据存储系统，常被用于缓存热点数据、存储会话状态、构建消息队列等。</p><h3 id="🔸-前端相关使用场景" tabindex="-1">🔸 前端相关使用场景 <a class="header-anchor" href="#🔸-前端相关使用场景" aria-label="Permalink to &quot;🔸 前端相关使用场景&quot;">​</a></h3><ul><li>登录状态管理：将登录态（Session 或 Token）缓存在 Redis 中。</li><li>限流：前端接口请求可以结合 Redis 限制频率。</li><li>数据缓存：如首页数据、商品列表等缓存至 Redis 提升响应速度。</li></ul><h3 id="✅-优点-1" tabindex="-1">✅ 优点 <a class="header-anchor" href="#✅-优点-1" aria-label="Permalink to &quot;✅ 优点&quot;">​</a></h3><ul><li>支持多种数据结构：字符串、哈希、集合、列表等。</li><li>响应极快，适合高频访问数据。</li></ul><h2 id="五、四者之间如何协作" tabindex="-1">五、四者之间如何协作？ <a class="header-anchor" href="#五、四者之间如何协作" aria-label="Permalink to &quot;五、四者之间如何协作？&quot;">​</a></h2><ul><li><strong>Nginx</strong>：作为网关，处理前端资源、请求路由、负载均衡。</li><li><strong>Tomcat</strong>：Java 接口处理引擎。</li><li><strong>Redis</strong>：缓存层，提高性能，支持分布式。</li><li><strong>IIS</strong>：通常出现在老旧系统中或 Windows-only 项目中。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">主要功能</th><th style="text-align:center;">常见组合场景</th></tr></thead><tbody><tr><td style="text-align:center;">IIS</td><td style="text-align:center;">Windows Web 服务</td><td style="text-align:center;">.NET、内网系统</td></tr><tr><td style="text-align:center;">Nginx</td><td style="text-align:center;">静态服务 &amp; 代理</td><td style="text-align:center;">Vue/React + API 代理</td></tr><tr><td style="text-align:center;">Tomcat</td><td style="text-align:center;">Java 接口服务</td><td style="text-align:center;">Spring Boot 后端</td></tr><tr><td style="text-align:center;">Redis</td><td style="text-align:center;">缓存/消息队列</td><td style="text-align:center;">限流、会话管理、接口加速</td></tr></tbody></table><p>对于前端工程师而言，理解这些服务的职责和部署方式，不仅能提升协作效率，更能在面试与实践中展现高级能力。</p><p>📌 <strong>可以尝试将一个 Vue 项目打包后用 Nginx 部署，并通过反向代理调用一个本地的 Tomcat 接口，再结合 Redis 做登录态缓存，完整体验前后端部署闭环。</strong></p>',35))])}const f=i(c,[["render",h]]);export{p as __pageData,f as default};
