import{j as t,c as n,ak as l,M as p,g as i,p as h,J as e,a as k}from"./chunks/framework.F_7_8ZIU.js";const u=JSON.parse('{"title":"ECMAScript 2019","description":"","frontmatter":{},"headers":[],"relativePath":"blog/es/es-2019.md","filePath":"blog/es/es-2019.md","lastUpdated":1738052089000}'),r={name:"blog/es/es-2019.md"};function o(E,s,d,g,y,c){const a=e("BrowserCard");return k(),n("div",null,[s[0]||(s[0]=l(`<h1 id="ecmascript-2019" tabindex="-1">ECMAScript 2019 <a class="header-anchor" href="#ecmascript-2019" aria-label="Permalink to &quot;ECMAScript 2019&quot;">​</a></h1><p>ECMAScript 2019（ES10）于 2019 年 6 月发布。</p><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><h3 id="_1-array-prototype-flat-和-array-prototype-flatmap-方法" tabindex="-1">1. Array.prototype.flat() 和 Array.prototype.flatMap() 方法 <a class="header-anchor" href="#_1-array-prototype-flat-和-array-prototype-flatmap-方法" aria-label="Permalink to &quot;1. Array.prototype.flat() 和 Array.prototype.flatMap() 方法&quot;">​</a></h3><ul><li><code>flat()</code> 方法用于将嵌套的数组“拉平”，使得嵌套的数组变成一个单层数组。可以指定拉平的深度。</li><li><code>flatMap()</code> 方法先对数组中的每个元素进行映射，然后再将结果“拉平”。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [x, x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 2, 4, 3, 6, 4, 8]</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>简化嵌套数组的处理：通过 flat() 可以轻松处理多层嵌套的数组结构。</li><li>灵活的映射和拉平操作：flatMap() 结合映射和拉平操作，提供了一种更简洁的数组处理方式。</li></ul><h3 id="_2-object-fromentries-方法" tabindex="-1">2. Object.fromEntries() 方法 <a class="header-anchor" href="#_2-object-fromentries-方法" aria-label="Permalink to &quot;2. Object.fromEntries() 方法&quot;">​</a></h3><p><code>Object.fromEntries()</code> 方法用于将一个键值对的可迭代对象（如数组）转化为一个对象。它是 Object.entries() 的<code>逆操作</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entries);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { name: &#39;Alice&#39;, age: 25 }</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>轻松转换键值对集合为对象：提供了一种简单的方法，将键值对数组转换为对象。</li><li>简化反向操作：通过 Object.fromEntries()，可以轻松地将 Map 对象或其他类似的键值对集合转换为普通对象。</li></ul><h3 id="_3-string-prototype-trimstart-和-string-prototype-trimend-方法" tabindex="-1">3. String.prototype.trimStart() 和 String.prototype.trimEnd() 方法 <a class="header-anchor" href="#_3-string-prototype-trimstart-和-string-prototype-trimend-方法" aria-label="Permalink to &quot;3. String.prototype.trimStart() 和 String.prototype.trimEnd() 方法&quot;">​</a></h3><p><code>trimStart()</code> 和 <code>trimEnd()</code> 方法用于分别删除字符串开头和结尾的空白字符（与 trim() 的区别在于它们只处理一端）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;  Hello World!  &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trimStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;Hello World!  &#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trimEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;  Hello World!&#39;</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>精确去除空白：允许开发者仅针对字符串的一端去除空白字符，而不是像 trim() 那样同时处理两端。</li><li>提升灵活性：提供更精确的字符串处理方法，特别适用于处理格式化输入和输出时</li></ul><h3 id="_4-array-prototype-sort-的稳定性" tabindex="-1">4. Array.prototype.sort() 的稳定性 <a class="header-anchor" href="#_4-array-prototype-sort-的稳定性" aria-label="Permalink to &quot;4. Array.prototype.sort() 的稳定性&quot;">​</a></h3><p>ES2019 规定了 <code>Array.prototype.sort()</code> 方法的稳定性，这意味着当排序的元素相等时，它们的相对顺序将保持不变。这在之前的 JavaScript 版本中并不是标准行为，可能因实现的不同而有所差异。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Eve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sorted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.age);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sorted); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [{ name: &#39;Bob&#39;, age: 23 }, { name: &#39;Alice&#39;, age: 23 }, { name: &#39;Eve&#39;, age: 30 }]</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>稳定排序：相同值的元素保持原有顺序，确保排序算法在排序等值元素时不会混乱。</li><li>提高排序可靠性：对于需要稳定排序（比如多个字段排序）时，ES2019 提供了一个更为可靠的默认排序行为。</li></ul><h3 id="_5-symbol-prototype-description-属性" tabindex="-1">5. Symbol.prototype.description 属性 <a class="header-anchor" href="#_5-symbol-prototype-description-属性" aria-label="Permalink to &quot;5. Symbol.prototype.description 属性&quot;">​</a></h3><p><code>Symbol.prototype.description</code> 属性提供了访问 Symbol 描述的标准方法。之前，Symbol 的描述只能在创建时通过传入字符串来设置，而无法直接获取。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sym</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sym.description); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;description&#39;</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>更直观地访问 Symbol 描述：提供了一个便捷的方式获取 Symbol 的描述信息，避免了直接转换 Symbol 为字符串的需要。</li><li>提升代码可读性：增强了对 Symbol 的理解，尤其是在调试和记录日志时。</li></ul><h3 id="_6-function-prototype-tostring-方法的规范化" tabindex="-1">6. Function.prototype.toString() 方法的规范化 <a class="header-anchor" href="#_6-function-prototype-tostring-方法的规范化" aria-label="Permalink to &quot;6. Function.prototype.toString() 方法的规范化&quot;">​</a></h3><p><code>Function.prototype.toString()</code> 方法的行为得到了规范化，确保了返回的函数字符串表示符合规范，并且在所有环境中一致。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;function example() { return 42; }&#39;</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>提高跨环境一致性：以前的浏览器或环境可能会返回不同的函数字符串表示。ES2019 规范化了这一行为，使得返回值更加一致。</li><li>增强可调试性：在调试过程中，开发者可以更一致地获取函数体的字符串表示。</li></ul><h3 id="_7-module-类型支持-es-模块" tabindex="-1">7. module 类型支持（ES 模块） <a class="header-anchor" href="#_7-module-类型支持-es-模块" aria-label="Permalink to &quot;7. module 类型支持（ES 模块）&quot;">​</a></h3><p>ES2019 为浏览器和 Node.js 提供了对原生模块（ES Module）支持。通过 <code>type=&quot;module&quot;</code> 属性，浏览器支持 <code>&lt;script&gt;</code> 标签内直接使用 ES6 的模块语法，Node.js 也开始支持 <code>.mjs</code> 后缀和原生模块系统。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;import {greet} from &#39;./greet.js&#39;; greet(&#39;Alice&#39;);&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>简化模块化开发：支持原生 ES 模块（ESM），让 JavaScript 开发更加现代化和模块化。</li><li>统一模块系统：解决了浏览器和 Node.js 之间模块导入的兼容性问题。</li></ul><h2 id="兼容性" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性" aria-label="Permalink to &quot;兼容性&quot;">​</a></h2>`,39)),p(a,{cv:"79+",fv:"62+",sv:"12+",ev:"79+",iev:"不支持",nv:"12+"}),s[1]||(s[1]=i("blockquote",null,[i("p",null,"注：兼容性数据可能随着版本的更新而有所调整，建议开发者根据项目的具体需求参考最新的浏览器版本和 Polyfill 支持情况。")],-1)),s[2]||(s[2]=i("h2",{id:"总结",tabindex:"-1"},[h("总结 "),i("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1)),s[3]||(s[3]=i("p",null,"ECMAScript 2019（ES10）带来了多个重要的增强特性，尤其是在数组处理、对象转换、字符串操作和符号描述等方面。通过这些新特性，JavaScript 更加高效、简洁，尤其是在处理数据和优化代码结构时，开发者将能够享受到更现代化的编程体验。",-1)),s[4]||(s[4]=i("p",null,[i("strong",null,"参考文献")],-1)),s[5]||(s[5]=i("p",null,[i("a",{href:"https://tc39.es/ecma262/2019/",target:"_blank",rel:"noreferrer"},"ECMA-262 2019 规范 👉")],-1))])}const C=t(r,[["render",o]]);export{u as __pageData,C as default};
