import{_ as a,c as i,a7 as t,o as n}from"./chunks/framework.ChKFagKG.js";const e="/apecode/images/blog/css/20210221130050853.png",E=JSON.parse('{"title":"Sass 的四种编译方式","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"blog/css-scss-compile.md","filePath":"blog/css-scss-compile.md","lastUpdated":1725550730000}'),p={name:"blog/css-scss-compile.md"};function l(h,s,o,k,r,c){return n(),i("div",null,s[0]||(s[0]=[t(`<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;liveSassCompile.settings.formats&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 插件配置项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;format&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compact&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置编译之后的格式</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;extensionName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译后缀名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;savePath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;~/../css&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 编译之后的路径，相对路径，此处的意思是将编译之后的文件保存在当前项目的css文件下（没有css文件夹将自动创建）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span></code></pre></div><p>添加完成之后，回到需要编译的 sass 文件中，在 vscode 右下角会有 Watch Sass 字样，他是监测 sass 文件的，当保存之后自动编译成 setting.json 定义的格式文件，点击开启即可。 之后就可以随意编写 sass 文件了，并且在输出控制台会有编译的成功或错误信息，可以及时纠正。 <img src="`+e+'" alt="在这里插入图片描述"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>以上便是今天介绍到的 sass 四种编译格式，以及具体的编译步骤，希望能够帮助到您。</p><p><code>最后，如果您有更好的方法，欢迎在留言区中分享；或者实际操作中遇到什么问题均可留言或者私信我，感谢您的观看！</code> 官方文档：<a href="https://www.sass.hk/" target="_blank" rel="noreferrer">Sass 官方文档</a></p>',5)]))}const g=a(p,[["render",l]]);export{E as __pageData,g as default};
