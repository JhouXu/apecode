import{m as n,l,c as t,b as e,g as i,k as h,ak as p,j as k}from"./chunks/framework.D9cF0xwY.js";const r="/apecode/assets/2025-04-25_23-18-24_docker.AEgqdv2y.jpg",d="/apecode/assets/2025-04-27_16-09-57_docker.D0QFMuIQ.jpg",o="/apecode/assets/2025-04-27_17-03-39_docker.Bs8Rtk88.jpg",c="/apecode/assets/2025-04-27_18-23-32_docker.B38GjM9Z.jpg",E=JSON.parse('{"title":"Docker 学习笔记","description":"","frontmatter":{"layout":"doc","date":"2025-04-24"},"headers":[],"relativePath":"blog/other/docker.md","filePath":"blog/other/docker.md","lastUpdated":1745751509000}'),g={name:"blog/other/docker.md"};function F(y,s,u,C,b,m){const a=l("PageInfo");return e(),t("div",null,[s[0]||(s[0]=i("h1",{id:"docker-学习笔记",tabindex:"-1"},[k("Docker 学习笔记 "),i("a",{class:"header-anchor",href:"#docker-学习笔记","aria-label":'Permalink to "Docker 学习笔记"'},"​")],-1)),h(a,{readingTime:"5",wordCount:"1.7k",publicTime:"2025-04-24"}),s[1]||(s[1]=p(`<h2 id="初识" tabindex="-1">初识 <a class="header-anchor" href="#初识" aria-label="Permalink to &quot;初识&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><blockquote><p>在项目生命周期中，我们编写的代码会接触几个环境：开发环境、测试环境和生产环境。当软件跨环境迁移运行时，可能会出现<code>代码水土不服</code>。</p></blockquote><ul><li>Docker 是一个开源的<code>应用容器引擎</code>；</li><li>诞生于 2013 年，基于 <code>Go 语言</code>实现，dotCloud 公司出品（后改名为 Docker Inc.）</li><li>Docker 可以让开发者打包他们的应用以及依赖包到一个<code>轻量级、可移植的</code>容器中，然后发布到任何流行的 Linux 机器上；</li><li>容器时完全使用<code>沙箱机制</code>，且<code>互相隔离</code>；</li><li>容器性能<code>开销极低</code>。</li><li>Docker 从 17.03 版本之后分为 CE(Community Edition: 社区版)和 EE(Enterprise Edition: 企业版)</li></ul><p><code>Docker 是一种容器技术，解决软件跨环境迁移的问题。</code></p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>Docker 可以运行在 MAC、Linux、Windows 等操作系统上。（视频教程将于 CentOS 7 进行演示）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1 yum 包更新到最新</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2 安装需要的软件包</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># yum-util 提供 yum-config-manager 命令，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># device-mapper-persistent-data 和 lvm2 是 devicemapper 驱动依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-utils</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vice-mapper-persistent-data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lvm2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3 设置 yum 源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum-config-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://download.docker.com/docker-ce/linux/centos/docker-ce.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4 安装 docker，出现输入的界面都按 y</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 5 查看 docker 版本，验证是否安装成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><h3 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h3><p><img src="`+r+`" alt="docker 架构"></p><ul><li>镜像（Image）： Docker 镜像，相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的 一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li>容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器时镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li>仓库（Repository）：仓库可以看成是一个代码控制中心，用来保存镜像。</li></ul><h3 id="配置镜像加速" tabindex="-1">配置镜像加速 <a class="header-anchor" href="#配置镜像加速" aria-label="Permalink to &quot;配置镜像加速&quot;">​</a></h3><p>默认情况下：从 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a>上下载 docker 镜像比较慢。一般都会配置镜像加速器。</p><ul><li>USTC 中科大镜像加速器：<a href="https://docker.mirrors.ustc.edu.cn/" target="_blank" rel="noreferrer">https://docker.mirrors.ustc.edu.cn/</a></li><li>阿里云：略。<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noreferrer">查询 👉</a></li><li>网易云：略</li><li>腾讯云：略</li></ul><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><h3 id="安装相关" tabindex="-1">安装相关 <a class="header-anchor" href="#安装相关" aria-label="Permalink to &quot;安装相关&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>跳到 <a href="./docker.html#安装">安装</a>。</p></div><h3 id="服务相关" tabindex="-1">服务相关 <a class="header-anchor" href="#服务相关" aria-label="Permalink to &quot;服务相关&quot;">​</a></h3><ul><li><strong>启动</strong></li><li><strong>停止</strong></li><li><strong>重启</strong></li><li><strong>查看状态</strong></li><li><strong>开机启动</strong></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动 docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止 docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启 docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看 docker 状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开机启动 docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">系统命令</p><ol><li>ubuntu - server</li><li>mac - launchctl</li><li>centos - systemctl</li></ol></div><h3 id="镜像相关" tabindex="-1">镜像相关 <a class="header-anchor" href="#镜像相关" aria-label="Permalink to &quot;镜像相关&quot;">​</a></h3><p><strong>查看镜像</strong>：查看本地所有的镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有镜像id</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span></span></code></pre></div><p><strong>搜索镜像</strong>：从网络中查找需要的镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 搜索镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [镜像名]</span></span></code></pre></div><p><strong>拉取镜像</strong>：从 Docker 仓库下载镜像到本地，镜像名称格式为 <code>名称:版本号</code>，如果版本号不指定则是<code>最新的版本（latest）</code>。如果不知道镜像版本，可以去 <code>docker hub</code> 上查看。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [镜像名]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取镜像，指定版本号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [镜像名]:[版本号]</span></span></code></pre></div><p><strong>删除镜像</strong>：删除本地镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除指定本地镜像，方式一</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [镜像名]:[版本号]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除指定本地镜像，方式二</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [镜像id]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除所有本地镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-q</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span></code></pre></div><h3 id="容器相关" tabindex="-1">容器相关 <a class="header-anchor" href="#容器相关" aria-label="Permalink to &quot;容器相关&quot;">​</a></h3><p><strong>查看容器</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看正在运行的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有容器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># STATUS：镜像状态，UP：正在运行，Exited：已经退出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><p><strong>创建容器</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [参数]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">参数说明</p><p><strong>-i</strong>：保持容器运行。同城与 <code>-t</code> 同时使用。加入 it 这两个参数后，容器创建后会自动进入容器中，<code>退出容器后，容器会自动关闭</code>。</p><p><strong>-t</strong>：为容器重新分配一个伪输入终端，通常与 <code>-i</code> 同时使用。</p><p><strong>-d</strong>：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用 docker exec 进入容器。<code>退出容器后，不会关闭</code>。</p><p><strong>-it</strong> 和 <strong>-id</strong> 的区别： <code>-it</code> 创建的容器一般称为<code>交互式容器</code>， <code>-id</code> 创建的容器一般称为<code>守护式容器</code>。</p><p><strong>--name</strong>：为创建的容器命名。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:c1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos:7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 创建一个 centos 版本为 7 的交互式容器，并命名为 c1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:c2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos:7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 创建一个 centos 版本为 7 的守护式容器，并命名为 c2</span></span></code></pre></div></div><p><strong>进入和退出容器</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [容器名] bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 退出容器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span></span></code></pre></div><p><strong>停止容器</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [容器名]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[容器id]</span></span></code></pre></div><p><strong>启动容器</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [容器名]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[容器id]</span></span></code></pre></div><p><strong>删除容器</strong>：如果容器是运行状态则删除失败，需要停止容器后才能删除。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [容器名]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[容器id]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有容器的id</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除全部容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span></code></pre></div></div><p><strong>查看容器信息</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [容器名]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[容器id]</span></span></code></pre></div><h2 id="容器的数据卷" tabindex="-1">容器的数据卷 <a class="header-anchor" href="#容器的数据卷" aria-label="Permalink to &quot;容器的数据卷&quot;">​</a></h2><h3 id="数据卷概念及作用" tabindex="-1">数据卷概念及作用 <a class="header-anchor" href="#数据卷概念及作用" aria-label="Permalink to &quot;数据卷概念及作用&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">思考</p><p>Docker 容器删除后，在容器中产生的数据也会随之销毁吗？</p><p>Docker 容器和外部机器可以直接交换文件吗？</p><p>容器之间如何进行数据交互？</p></div><p>数据卷：</p><ul><li>是宿主机中的一个目录或文件。</li><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步。</li><li>一个数据卷可以被多个容器同时挂载。</li><li>一个容器也可以被挂载多个数据卷。</li></ul><p>数据卷作用：</p><ul><li>容器数据持久化。</li><li>外部机器和容器间接通讯。</li><li>容器之间数据交换。</li></ul><p><img src="`+d+`" alt="数据卷示意图"></p><h3 id="配置数据卷" tabindex="-1">配置数据卷 <a class="header-anchor" href="#配置数据卷" aria-label="Permalink to &quot;配置数据卷&quot;">​</a></h3><p>创建启动容器时，使用 -v 参数来配置数据卷。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -[参数]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:[容器名]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [镜像名]:[镜像版本] -v [宿主机目录(文件)]:[容器内目录(文件)]</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意事项</p><ol><li>目录必须是绝对路径。</li><li>如果目录不存在，将会自动创建。</li><li>可以挂载多个数据卷。</li></ol></div><div class="tip custom-block"><p class="custom-block-title">示例</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置一个数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:c1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos:7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/data:/root/data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置多个数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:c2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos:7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/data2:/root/data2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/data3:/root/data3</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 一个数据卷，挂载给不同的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:c3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos:7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/data:/root/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/data:/root/data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:c4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos:7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/data:/root/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/data:/root/data</span></span></code></pre></div></div><h3 id="配置数据卷容器" tabindex="-1">配置数据卷容器 <a class="header-anchor" href="#配置数据卷容器" aria-label="Permalink to &quot;配置数据卷容器&quot;">​</a></h3><p>多容器进行数据交换的方式：</p><ol><li>多个容器挂载同一个数据卷</li><li><code>数据卷容器</code></li></ol><p><img src="`+o+`" alt="数据卷容器卷示意图"></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 创建启动 c3 数据卷容器，使用 -v 参数，设置数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:c3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos:7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /volume</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 创建启动 c1 c2 容器，使用 --volumes-form 参数，设置数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:c1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos:7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --volumes-from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name:c2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos:7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --volumes-from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c3</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">小结</p><ol><li>数据卷概念：宿主机的一个目录或文件。</li><li>数据卷作用： <ul><li>容器数据持久化。</li><li>客户端和容器数据交换。</li><li>容器间数据交换。</li></ul></li><li>数据卷容器： <ul><li>创建一个容器，挂载一个目录，让其他容器继承自该容器（--volumes-from）。</li><li>通过简单方式实现数据卷配置。</li><li><strong>作用</strong>：<code>实现解构，快速复制容器的数据卷配置</code></li></ul></li></ol></div><h2 id="应用部署" tabindex="-1">应用部署 <a class="header-anchor" href="#应用部署" aria-label="Permalink to &quot;应用部署&quot;">​</a></h2><h3 id="mysql" tabindex="-1">mysql <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;mysql&quot;">​</a></h3><blockquote><p>MySQL 是一个开源的关系型数据库管理系统（RDBMS）。简单点说，就是一种用来存储、管理和查询数据的软件。</p></blockquote><p>需求：在 Docker 容器中部署 MySQL，并通过外部 mysql 客户端操作 MySQL Server。</p><p>实现步骤：</p><ol><li>搜索 mysql 镜像</li><li>拉去 mysql 镜像</li><li>创建容器</li><li>操作容器中的 mysql</li></ol><p><a href="https://www.bilibili.com/video/BV1CJ411T7BK/" target="_blank" rel="noreferrer">详细操作实现 👉</a></p><div class="warning custom-block"><p class="custom-block-title">注意事项</p><p><img src="`+c+'" alt="应用部署 MySQl 容器示意图"></p><ul><li>容器内的网络服务和外部机器不能直接通讯。</li><li>外部机器和宿主机可以直接通讯。</li><li>宿主机和容器可以直接通讯。</li><li>当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口号上。外部机器访问宿主机的该端口，从而间接访问容器的服务。</li><li>这种操作称为：<code>端口映射</code>。</li></ul></div><h3 id="tomcat" tabindex="-1">tomcat <a class="header-anchor" href="#tomcat" aria-label="Permalink to &quot;tomcat&quot;">​</a></h3><blockquote><p>Tomcat 是一个轻量级的 Web 服务器 + Servlet 容器，主要是用来运行 Java Web 应用的。</p></blockquote><p>略</p><h3 id="nginx" tabindex="-1">nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;nginx&quot;">​</a></h3><blockquote><p>Nginx 是一个高性能的 Web 服务器、反向代理服务器和负载均衡器。</p></blockquote><p>略</p><h3 id="redis" tabindex="-1">redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;redis&quot;">​</a></h3><blockquote><p>Redis 是一个开源的、基于内存的、高性能键值（key-value）数据库。</p></blockquote><p>略</p><h2 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h2><h2 id="服务编排" tabindex="-1">服务编排 <a class="header-anchor" href="#服务编排" aria-label="Permalink to &quot;服务编排&quot;">​</a></h2><h2 id="私有仓库" tabindex="-1">私有仓库 <a class="header-anchor" href="#私有仓库" aria-label="Permalink to &quot;私有仓库&quot;">​</a></h2><h2 id="相关概念" tabindex="-1">相关概念 <a class="header-anchor" href="#相关概念" aria-label="Permalink to &quot;相关概念&quot;">​</a></h2><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.docker.com/" target="_blank" rel="noreferrer">Docker 官方文档 👉</a></li><li><a href="https://www.bilibili.com/video/BV1CJ411T7BK/" target="_blank" rel="noreferrer">黑马程序员 Docker 容器化技术，从零学会 Docker 教程 - 黑马程序员 👉</a></li></ul>',89))])}const v=n(g,[["render",F]]);export{E as __pageData,v as default};
