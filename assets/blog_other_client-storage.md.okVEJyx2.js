import{j as i,c as a,b as t,ak as e}from"./chunks/framework.BP8NeZXK.js";const n="/apecode/assets/1.Bv71nLTA.jpg",g=JSON.parse('{"title":"客户端中的几种存储机制","description":"","frontmatter":{},"headers":[],"relativePath":"blog/other/client-storage.md","filePath":"blog/other/client-storage.md","lastUpdated":1739378669000}'),h={name:"blog/other/client-storage.md"};function k(p,s,l,r,o,d){return t(),a("div",null,s[0]||(s[0]=[e('<h1 id="客户端中的几种存储机制" tabindex="-1">客户端中的几种存储机制 <a class="header-anchor" href="#客户端中的几种存储机制" aria-label="Permalink to &quot;客户端中的几种存储机制&quot;">​</a></h1><p>在前端开发中，浏览器提供了多种存储机制，用于在客户端保存数据。</p><p><img src="'+n+`" alt="示例"></p><h2 id="cookies" tabindex="-1">Cookies <a class="header-anchor" href="#cookies" aria-label="Permalink to &quot;Cookies&quot;">​</a></h2><p>Cookies 是<code>最早</code>的客户端存储机制，由 Netscape 公司在 1994 年提出，用于在客户端存储少量数据，如会话 ID 或用户偏好。</p><p><strong>使用场景</strong>: 存储会话 ID、用户偏好等。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;key=value; expires=Fri, 31 Dec 2023 23:59:59 GMT; path=/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cookies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.cookie; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取所有 cookies</span></span></code></pre></div><h2 id="local-storage-session-storage" tabindex="-1">Local Storage &amp; Session Storage <a class="header-anchor" href="#local-storage-session-storage" aria-label="Permalink to &quot;Local Storage &amp; Session Storage&quot;">​</a></h2><p>Local Storage 和 Session Storage 是 HTML5 标准的一部分，于 2009 年正式提出。它们提供了比 Cookies <code>更简单、容量更大</code>的客户端存储方式。</p><h3 id="local-storage" tabindex="-1">Local Storage <a class="header-anchor" href="#local-storage" aria-label="Permalink to &quot;Local Storage&quot;">​</a></h3><p><code>持久化</code>存储数据，数据不会随页面关闭而消失。</p><p><strong>使用场景</strong>: 存储用户偏好设置、登录状态等需要长期保存的数据。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清除所有数据</span></span></code></pre></div><h3 id="session-storage" tabindex="-1">Session Storage <a class="header-anchor" href="#session-storage" aria-label="Permalink to &quot;Session Storage&quot;">​</a></h3><p><code>会话级别</code>的存储，数据在页面会话结束时（关闭页面或浏览器）被清除。</p><p><strong>使用场景</strong>: 存储临时数据，如表单数据、页面状态等。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清除所有数据</span></span></code></pre></div><h2 id="indexeddb" tabindex="-1">IndexedDB <a class="header-anchor" href="#indexeddb" aria-label="Permalink to &quot;IndexedDB&quot;">​</a></h2><p>IndexedDB 是 HTML5 标准的一部分，于 2010 年提出。它是一个低级 API，用于在客户端存储<code>大量结构化数据</code>，适合复杂应用场景。</p><p><strong>使用场景</strong>: 存储大量数据，如离线应用数据、复杂数据结构等。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> indexedDB.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyDatabase&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onupgradeneeded</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> db</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target.result;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createObjectStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyObjectStore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { keyPath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onsuccess</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> db</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target.result;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transaction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyObjectStore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;readwrite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">objectStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyObjectStore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="cache-storage" tabindex="-1">Cache Storage <a class="header-anchor" href="#cache-storage" aria-label="Permalink to &quot;Cache Storage&quot;">​</a></h2><p>Cache Storage 是 <code>Service Worker API</code> 的一部分，于 2014 年提出。它用于<code>缓存网络请求</code>的响应，支持<code>离线访问</code>和<code>渐进式 Web 应用</code>（PWA）。</p><p><strong>使用场景</strong>: 渐进式 Web 应用（PWA）中用于缓存资源。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">caches.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/resource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="extension-storage" tabindex="-1">Extension Storage <a class="header-anchor" href="#extension-storage" aria-label="Permalink to &quot;Extension Storage&quot;">​</a></h2><p>Extension Storage 是浏览器扩展 API 的一部分，于 2015 年左右提出。它为浏览器<code>扩展程序</code>提供了专用的存储机制。</p><p><strong>使用场景</strong>: 存储扩展程序的配置、用户数据等。</p><p><strong>操作方法</strong>: 依赖于浏览器扩展 API。</p><h2 id="storage-buckets" tabindex="-1">Storage Buckets <a class="header-anchor" href="#storage-buckets" aria-label="Permalink to &quot;Storage Buckets&quot;">​</a></h2><p>Storage Buckets 是较新的存储管理机制，于 2020 年左右提出。它提供了<code>更细粒度</code>的存储管理，支持数据隔离和生命周期控制。</p><p><strong>使用场景</strong>: 需要隔离存储数据的场景。</p><p><strong>操作方法</strong>: 依赖于浏览器实现。</p><h2 id="private-state-tokens" tabindex="-1">Private State Tokens <a class="header-anchor" href="#private-state-tokens" aria-label="Permalink to &quot;Private State Tokens&quot;">​</a></h2><p>Private State Tokens 是<code>隐私保护技术</code>的一部分，于 2021 年提出。它用于防止跨站跟踪和保护用户隐私。</p><p><strong>使用场景</strong>: 用于防止跨站跟踪和保护用户隐私。</p><p><strong>操作方法</strong>: 依赖于浏览器实现。</p><h2 id="interest-groups-shared-storage" tabindex="-1">Interest Groups &amp; Shared Storage <a class="header-anchor" href="#interest-groups-shared-storage" aria-label="Permalink to &quot;Interest Groups &amp; Shared Storage&quot;">​</a></h2><p>Interest Groups 和 Shared Storage 是<code>隐私沙盒（Privacy Sandbox）</code>的一部分，于 2021 年提出。它们用于<code>广告定向</code>和<code>跨站点数据共享</code>，同时保护用户隐私。</p><h3 id="interest-groups" tabindex="-1">Interest Groups <a class="header-anchor" href="#interest-groups" aria-label="Permalink to &quot;Interest Groups&quot;">​</a></h3><p>用于<code>广告定向</code>和<code>用户兴趣</code>分组。</p><p><strong>使用场景</strong>: 广告技术中用于定向广告投放。</p><p><strong>操作方法</strong>: 依赖于浏览器实现。</p><h3 id="shared-storage" tabindex="-1">Shared Storage <a class="header-anchor" href="#shared-storage" aria-label="Permalink to &quot;Shared Storage&quot;">​</a></h3><p>用于<code>跨站点共享</code>数据。</p><p><strong>使用场景</strong>: 广告技术、跨站点用户行为分析等。</p><p><strong>操作方法</strong>: 依赖于浏览器实现。</p>`,47)]))}const c=i(h,[["render",k]]);export{g as __pageData,c as default};
