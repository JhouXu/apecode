import{_ as a,o as e,c as t,N as r}from"./chunks/framework.a6d8af91.js";const f=JSON.parse('{"title":"渡一大师课","description":"","frontmatter":{},"headers":[],"relativePath":"pages/essays/javascript_duyi.md","lastUpdated":1710754944000}'),o={name:"pages/essays/javascript_duyi.md"},s=r('<h1 id="渡一大师课" tabindex="-1">渡一大师课 <a class="header-anchor" href="#渡一大师课" aria-label="Permalink to &quot;渡一大师课&quot;">​</a></h1><p>本文为观看<a href="https://fe.duyiedu.com/p/t_pc/course_pc_detail/camp_pro/course_2VKbErGXkTSzvbl9aQ9HgndEtIz" target="_blank" rel="noreferrer">渡一教育大师课</a>后，整理的线上面试题笔记，以供日常复习使用。</p><h2 id="原理-事件循环" tabindex="-1">原理 - 事件循环 <a class="header-anchor" href="#原理-事件循环" aria-label="Permalink to &quot;原理 - 事件循环&quot;">​</a></h2><p><code>单线程是异步产生的原因</code></p><p><code>事件循环是异步的实现方式</code></p><h3 id="如何理解-js-的异步" tabindex="-1">如何理解 JS 的异步？ <a class="header-anchor" href="#如何理解-js-的异步" aria-label="Permalink to &quot;如何理解 JS 的异步？&quot;">​</a></h3><p>JS 是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p><p>而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。</p><p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。</p><p>这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p><p>所以浏览器采用异步的方式来避免。具体的做法是当某些任务发生时，比如计时器、网络、时间监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务书，加入到消息队列的末尾排队，等待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p><h3 id="阐述一下-js-的事件循环" tabindex="-1">阐述一下 JS 的事件循环 <a class="header-anchor" href="#阐述一下-js-的事件循环" aria-label="Permalink to &quot;阐述一下 JS 的事件循环&quot;">​</a></h3><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已经无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p><h3 id="js-中的计时器能够做到精确计时吗-为什么" tabindex="-1">JS 中的计时器能够做到精确计时吗？为什么？ <a class="header-anchor" href="#js-中的计时器能够做到精确计时吗-为什么" aria-label="Permalink to &quot;JS 中的计时器能够做到精确计时吗？为什么？&quot;">​</a></h3><p>不行，因为:</p><ol><li>计算机硬件没有原子钟，无法做到精确计时；</li><li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差；</li><li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少事件，这样在计时时间少于 4 毫秒时又带来了偏差；</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差。</li></ol>',20),p=[s];function i(l,c,d,n,_,h){return e(),t("div",null,p)}const m=a(o,[["render",i]]);export{f as __pageData,m as default};
