import{m as l,l as r,c as s,b as o,g as e,k as n,ak as i,j as b}from"./chunks/framework.CQRHJ6zi.js";const _=JSON.parse('{"title":"表格开发常见的渲染方式","description":"","frontmatter":{},"headers":[],"relativePath":"blog/table-render.md","filePath":"blog/table-render.md","lastUpdated":1747899715000}'),d={name:"blog/table-render.md"};function c(g,a,p,h,m,u){const t=r("PageInfo");return o(),s("div",null,[a[0]||(a[0]=e("h1",{id:"表格开发常见的渲染方式",tabindex:"-1"},[b("表格开发常见的渲染方式 "),e("a",{class:"header-anchor",href:"#表格开发常见的渲染方式","aria-label":'Permalink to "表格开发常见的渲染方式"'},"​")],-1)),n(t,{readingTime:"1",wordCount:"486",publicTime:"2025-01-23"}),a[1]||(a[1]=i('<blockquote><p><a href="https://www.bilibili.com/video/BV1Nw6mYJEJc" target="_blank" rel="noreferrer">📺 飞书文档表格开发难点：1000w 行数据流畅渲染的秘密 - Cris 讲前端</a></p></blockquote><h2 id="初级-table-dom" tabindex="-1">初级：table DOM <a class="header-anchor" href="#初级-table-dom" aria-label="Permalink to &quot;初级：table DOM&quot;">​</a></h2><p>这是最基础的实现方式，直接使用 HTML 的 &lt;table&gt; 元素来渲染表格。</p><p><strong>实现方案</strong></p><ul><li><strong>简单实现</strong>: 直接使用 HTML 和 JavaScript 来渲染表格。</li><li><strong>实现方案</strong>: 适用于数据量较少的场景，当行数和列数有限时，直接使用 DOM 元素处理方便。</li></ul><h2 id="中级-虚拟表格" tabindex="-1">中级：虚拟表格 <a class="header-anchor" href="#中级-虚拟表格" aria-label="Permalink to &quot;中级：虚拟表格&quot;">​</a></h2><p>使用虚拟化技术来渲染表格，只有视口中的行和列才会渲染。</p><p><strong>实现方案</strong></p><ul><li><strong>库选择</strong>: 使用 react-window 或 react-virtualized 等库，来实现虚拟表格。</li><li><strong>适用场景</strong>: 适用于数据量较大但需要浏览的行数有限的情况，使用虚拟化技术减少 DOM 渲染的数量。</li></ul><h2 id="高级-canvas-table" tabindex="-1">高级：canvas table <a class="header-anchor" href="#高级-canvas-table" aria-label="Permalink to &quot;高级：canvas table&quot;">​</a></h2><p>使用 HTML5 Canvas 来绘制表格内容，避免大量 DOM 操作，提高渲染性能。</p><p><strong>实现方案</strong></p><ul><li><strong>使用 Canvas API</strong>: 通过 Canvas API 手动绘制表格的每个单元格。</li><li><strong>适用场景</strong>: 适用于需要更高效渲染和更灵活绘制能力的场景。</li></ul><h2 id="专家-canvas-tile-技术" tabindex="-1">专家：canvas + tile 技术 <a class="header-anchor" href="#专家-canvas-tile-技术" aria-label="Permalink to &quot;专家：canvas + tile 技术&quot;">​</a></h2><p>通过将表格划分为多个 tile（瓷砖）区域，只渲染当前视口及周围的 tile，提高渲染性能和内存使用效率。</p><p><strong>实现方案</strong></p><ul><li><strong>Tile 分区</strong>: 将表格划分为多个 tile 区域，每个 tile 只包含一定数量的单元格。</li><li><strong>懒加载和预加载</strong>: 仅在需要时加载和渲染特定的 tile，同时预加载用户视口附近的 tile。</li></ul><h2 id="高级专家-skia-webassembly" tabindex="-1">高级专家：skia + WebAssembly <a class="header-anchor" href="#高级专家-skia-webassembly" aria-label="Permalink to &quot;高级专家：skia + WebAssembly&quot;">​</a></h2><p>使用 Skia 图形库结合 WebAssembly，实现高性能、跨平台的表格渲染。</p><p><strong>实现方案</strong></p><ul><li><strong>Skia 图形库</strong>: Skia 是一个跨平台的 2D 图形库，可以高效地绘制复杂图形。</li><li><strong>WebAssembly</strong>: 通过 WebAssembly 将 Skia 集成到 Web 应用中，提升图形渲染性能。</li></ul>',21))])}const f=l(d,[["render",c]]);export{_ as __pageData,f as default};
