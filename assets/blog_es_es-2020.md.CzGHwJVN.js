import{j as l,c as n,ak as t,M as h,g as i,p as e,J as p,a as k}from"./chunks/framework.F_7_8ZIU.js";const u=JSON.parse('{"title":"ECMAScript 2020","description":"","frontmatter":{},"headers":[],"relativePath":"blog/es/es-2020.md","filePath":"blog/es/es-2020.md","lastUpdated":1738228998000}'),r={name:"blog/es/es-2020.md"};function d(E,s,o,g,c,y){const a=p("BrowserCard");return k(),n("div",null,[s[0]||(s[0]=t(`<h1 id="ecmascript-2020" tabindex="-1">ECMAScript 2020 <a class="header-anchor" href="#ecmascript-2020" aria-label="Permalink to &quot;ECMAScript 2020&quot;">​</a></h1><p>ECMAScript 2020（ES11）于 2020 年 6 月发布。</p><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><h3 id="_1-可选链操作符-optional-chaining" tabindex="-1">1. 可选链操作符（Optional Chaining） <a class="header-anchor" href="#_1-可选链操作符-optional-chaining" aria-label="Permalink to &quot;1. 可选链操作符（Optional Chaining）&quot;">​</a></h3><p>可选链操作符 <code>?.</code> 使得开发者能够安全地访问深层嵌套的对象属性。如果某个中间属性不存在或为 <code>null</code> 或 <code>undefined</code>，则返回 undefined，而不是抛出错误。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { profile: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.profile?.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;Alice&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.address?.city); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>简化深层嵌套属性的访问：避免了手动检查每一层对象是否存在。</li><li>提升代码安全性：防止了由于访问 null 或 undefined 属性而导致的运行时错误。</li></ul><h3 id="_2-空值合并运算符-nullish-coalescing-operator" tabindex="-1">2. 空值合并运算符（Nullish Coalescing Operator） <a class="header-anchor" href="#_2-空值合并运算符-nullish-coalescing-operator" aria-label="Permalink to &quot;2. 空值合并运算符（Nullish Coalescing Operator）&quot;">​</a></h3><p>空值合并运算符 <code>??</code> 用于判断左侧操作数是否为 <code>null</code> 或 <code>undefined</code>。如果是，返回右侧操作数，否则返回左侧操作数。与 || 运算符不同，?? 只会考虑 null 或 undefined，而不会在左侧值为其他 falsy 值（如 0、NaN、false、&quot;&quot; 等）时触发。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;Default&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>简化值判定：在处理 null 或 undefined 时，提供了一个简洁的语法。</li><li>避免错误判断：不像 ||，它不会误判其他 falsy 值，保证了更精确的逻辑判断。</li></ul><h3 id="_3-bigint-类型" tabindex="-1">3. BigInt 类型 <a class="header-anchor" href="#_3-bigint-类型" aria-label="Permalink to &quot;3. BigInt 类型&quot;">​</a></h3><p><code>BigInt</code> 类型，允许处理大于 <code>2^53 - 1</code> 的整数。对于需要大数字精度计算的场景（如加密、科学计算等），BigInt 提供了原生支持。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bigIntValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9007199254740991</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigIntValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 9007199254740991n</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> anotherBigInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456789123456789</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(anotherBigInt); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 123456789123456789n</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>处理大数字：对于涉及大整数计算的应用，BigInt 提供了安全和高效的原生支持。</li><li>避免精度问题：原生支持超大整数，解决了 Number 类型的精度限制问题。</li></ul><h3 id="_4-promise-allsettled-方法" tabindex="-1">4. Promise.allSettled() 方法 <a class="header-anchor" href="#_4-promise-allsettled-方法" aria-label="Permalink to &quot;4. Promise.allSettled() 方法&quot;">​</a></h3><p><code>Promise.allSettled()</code> 方法接受一个 Promise 可迭代对象，并返回一个新的 Promise，只有当所有输入的 Promise 都完成时，返回的 Promise 才会解决，解决的结果是一个包含每个 Promise 状态及其值的数组。即使某个 Promise 被拒绝，allSettled() 也会继续等待其他 Promise 完成。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> promise1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> promise2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error occurred&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> promise3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allSettled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([promise1, promise2, promise3]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">results</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  results.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.status); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;fulfilled&#39; or &#39;rejected&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 成功时的值，失败时为 undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.reason); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 失败时的原因</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>改进错误处理：解决了 Promise.all() 只要有一个 Promise 被拒绝就会立即失败的问题，提供了更灵活的错误处理方式。</li><li>支持并行异步任务：非常适合处理多个并行异步任务，尤其是当不在乎某些任务失败时。</li></ul><h3 id="_5-globalthis-对象" tabindex="-1">5. globalThis 对象 <a class="header-anchor" href="#_5-globalthis-对象" aria-label="Permalink to &quot;5. globalThis 对象&quot;">​</a></h3><p><code>globalThis</code> 提供了一个标准的方式来访问全局对象，无论是在浏览器、Node.js 还是 Web Worker 中，都能统一访问全局环境。它取代了不同环境中对全局对象的不同引用（如 <code>window</code>、<code>global</code> 等）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4 (最后一个元素)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3 (倒数第二个元素)</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>统一访问全局对象：简化了跨环境代码的编写，使得开发者不再需要根据不同环境判断如何访问全局对象。</li><li>提升可移植性：无论是在浏览器、Node.js 还是其他 JavaScript 环境中，都可以统一使用 globalThis。</li></ul><h3 id="_6-for-in-循环的顺序规范" tabindex="-1">6. for-in 循环的顺序规范 <a class="header-anchor" href="#_6-for-in-循环的顺序规范" aria-label="Permalink to &quot;6. for-in 循环的顺序规范&quot;">​</a></h3><p>ES2020 确定了 <code>for-in</code> 循环在枚举对象属性时的顺序行为。以前，<code>for-in</code> 的属性遍历顺序在不同环境中可能会有所不同，ES2020 确保了 <code>for-in</code> 遍历对象属性时，遵循以下顺序：</p><ul><li>数字键（按升序排列）。</li><li>字符串键（按插入顺序排列）。</li><li>Symbol 键（按插入顺序排列）。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alpha&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出顺序：1, 2, 3, a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>稳定的属性遍历顺序：确保了不同 JavaScript 环境中 for-in 循环的属性遍历顺序一致，避免了不必要的错误。</li></ul><h3 id="_7-module-类型支持-es-模块" tabindex="-1">7. module 类型支持（ES 模块） <a class="header-anchor" href="#_7-module-类型支持-es-模块" aria-label="Permalink to &quot;7. module 类型支持（ES 模块）&quot;">​</a></h3><p>ES2020 为浏览器和 Node.js 提供了对原生模块（ES Module）支持。通过 <code>type=&quot;module&quot;</code> 属性，浏览器支持 <code>&lt;script&gt;</code> 标签内直接使用 ES6 的模块语法，Node.js 也开始支持 <code>.mjs</code> 后缀和原生模块系统。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;import {greet} from &#39;./greet.js&#39;; greet(&#39;Alice&#39;);&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>影响</strong>：</p><ul><li>简化模块化开发：支持原生 ES 模块（ESM），让 JavaScript 开发更加现代化和模块化。</li><li>统一模块系统：解决了浏览器和 Node.js 之间模块导入的兼容性问题。</li></ul><h2 id="兼容性" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性" aria-label="Permalink to &quot;兼容性&quot;">​</a></h2>`,40)),h(a,{cv:"80+",fv:"68+",sv:"13+",ev:"80+",nv:"12+"}),s[1]||(s[1]=i("blockquote",null,[i("p",null,"注：兼容性数据可能随着版本的更新而有所调整，建议开发者根据项目的具体需求参考最新的浏览器版本和 Polyfill 支持情况。")],-1)),s[2]||(s[2]=i("h2",{id:"总结",tabindex:"-1"},[e("总结 "),i("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1)),s[3]||(s[3]=i("p",null,"ECMAScript 2020（ES11）为 JavaScript 带来了多个重要的特性，特别是对于开发者来说，可选链操作符、空值合并运算符、BigInt、Promise.allSettled() 等新特性极大地提高了代码的简洁性、可读性和稳定性。它们为处理深层对象访问、异步任务并行处理、大数字运算等场景提供了更好的支持。",-1)),s[4]||(s[4]=i("p",null,[i("strong",null,"参考文献")],-1)),s[5]||(s[5]=i("p",null,[i("a",{href:"https://tc39.es/ecma262/2020/",target:"_blank",rel:"noreferrer"},"ECMA-262 2020 规范 👉")],-1))])}const C=l(r,[["render",d]]);export{u as __pageData,C as default};
